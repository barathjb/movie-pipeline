# Workflow name
name: frontend-cd-deploy

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
  
  
#   # Automatic trigger on pull request events targeting the main branch
#   push:
#     branches:
#         - main
      

# Jobs defined in the workflow
jobs:

  # frontend-cd-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     #checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     #setup node.js and cache
  #     - name: Set up Node.js 
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: latest
  #         cache-dependency-path: './starter/frontend/package-lock.json'
  #         cache: 'npm'

  #     #Install dependencies
  #     - name: install dependencies
  #       run: cd starter/frontend && npm ci

  #     #Run tests
  #     - name: Run tests
  #       run: cd starter/frontend &&  npm test
      
  # frontend-cd-lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     #checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     #setup node.js  and cache
  #     - name: Set up Node.js 
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: latest
  #         cache-dependency-path: './starter/frontend/package-lock.json'
  #         cache: 'npm'

  #     #Install dependencies
  #     - name: install dependencies
  #       run: cd starter/frontend && npm ci

  #     #Run tests
  #     - name: Run tests
  #       run: cd starter/frontend &&  npm run lint
  
  frontend-cd-build:
    # needs: [frontend-cd-test, frontend-cd-lint]
    runs-on: ubuntu-latest
    steps:
      #checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # #create build
      # - name: create build
      #   run: cd starter/frontend &&  docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t mp-frontend .
      
      #configure AWS credentials
      - name: AWS configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          # role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/my-github-actions-role

      #Login to ECR
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      #Build and push to ECR
      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          IMAGE_TAG: latest        
          REACT_APP_MOVIE_API_URL: http://localhost:5000
        run: |
          docker build -t frontend ./starter/frontend/ --build-arg=$REACT_APP_MOVIE_API_URL
          docker tag frontend:$IMAGE_TAG ${{ secrets.FRONTEND_ECR }}:$IMAGE_TAG
          docker push ${{ secrets.FRONTEND_ECR }}:$IMAGE_TAG

      #Deploy to EKS
      - name: Deploying to EKS
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.aws-region-1.amazonaws.com
          REPOSITORY: frontend
          IMAGE_TAG: latest  

        run: |
          sed -ie 's/image: frontend/image: 255840645116.dkr.ecr.us-east-1.amazonaws.com\/frontend:latest/g' ./starter/frontend/k8s/deployment.yaml
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}
          kubectl apply -f ./starter/frontend/k8s/deployment.yaml
          kubectl apply -f ./starter/frontend/k8s/service.yaml
          
      # #Connect to EKS
      # - name: Connecting to EKS cluster
      #   # run: aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}
      #   uses: kodermax/kubectl-aws-eks@main 
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      #     ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.aws-region-1.amazonaws.com
      #     IMAGE_TAG: latest     
      #     ECR_REPOSITORY: frontend
      #   with:
      #     # args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     args: apply -f ./starter/frontend/k8s/deployment.yaml ./starter/frontend/k8s/service.yaml


          # #Deploy to EKS
      # - name: Deploy to EKS cluster
      #   run: |
      #     kubectl apply -f ./starter/frontend/k8s/deployment.yaml
      #     kubectl apply -f ./starter/frontend/k8s/service.yaml


       
          